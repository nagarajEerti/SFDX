 1.Write a trigger on Account, when an account is inserted, automatically account billing address should populate into the account shipping address.
 A. when we are inserting the new account object we need check that whether the billing address is provided or not 
    if provided we ned add the address like Billing street billing State billing postalCode and billing country     
    this things we need check before the inserting of the account object .

code:  
 in trigger ==>
    trigger practiceOnTriggersWithAccount on Account (before insert) {

    switch on Trigger.operationType {
        when BEFORE_INSERT{
            PracticeAccountHHandler.accountShippingAddress(Trigger.new); 
        }
    }
}//end of trigger

source : 
trigger changeShippingAddress on Account (before insert){
for(Account aObj : Trigger.new){
//We should first check whether the user is passing null data
if(aObj.BillingStreet!=null){
aObj.ShippingStreet=aObj.BillingStreet;
}
if(a.BillingCity!=null){
aObj.ShippingCity=aObj.BillingCity;
}
if(a.BillingState!=null){
aObj.ShippingState=aObj.BillingState;
}
if(a.BillingPostalCode!=null){
aObj.ShippingPostalCode=aObj.BillingPostalCode;
}
if(a.BillingCountry!=null){
aObj.ShippingCountry=aObj.BillingCountry;
}
}
}

2. Write a trigger on the Account when the Account is updated check all opportunities related to the account. Update all Opportunities Stage to close lost if an opportunity created date is greater than 30 days from today and stage not equal to close won.  
my Analysis:
          1. when account is updated check all the opportunities related to this account 
          2. so we need to get the all opportunities which related to the account ids 
          3. if this opportunities are 30 days old we need to change the stage to close lost  
          4. but it should not be close won before updating .
source : Here we have to update Account related Opportunities based on a condition which is mentioned above in Question. So here we are using ” after update ” 
because once the Account is updated we are not making changes for the Account which is getting updated instead we are making changes for its related Object Opportunity.

First, we have to get the Account Id’s of the Account which is getting updated in a Set<Id> and write a query to get that particular Account Id’s Opportunities,
 then loop the list of that opportunities and check for the condition given in question then change the values according to the question and also check for the mandatory fields to update in opportunity.
 Later update the list of Opportunities for which the changes have been applied by adding those to a separate list and updating that list.

 source code :
 trigger OppoStageUpdate on Account (after update){
Set<Id> accountIds = new Set<Id>();
for(Account a:Trigger.new){
accountIds.add(a.Id);
}
//day30 is the date which is 30 days less than today
DateTime day30=system.now()-30;
List<Opportunity> oppListToUpdate=new List<Opportunity>();
//getting the opportunities whose account has been updated
List<Opportunity> oppList = [Select Id, AccountId, StageName, CreatedDate, CloseDate from Opportunity where AccountId in :accountIds];
if(oppList.size()>0){
for(Opportunity opp : oppList){
//checking for condition if created date is greater than 30 days from today and stage not equal to close won
if(opp.CreatedDate<day30 && opp.StageName!='Closed Won'){
opp.StageName='Closed Lost';    //This is a mandatory field when we update the CloseDate
opp.CloseDate=system.today();
oppListToUpdate.add(opp);  //putting the changed opportunity to separate list to update later
}
}
}
//checking if the opportunity list which has changed is having records or not
if(oppListToUpdate.size()>0){
update oppListToUpdate;
}
}

my code :
 public static void updateOpportunityStage(List<Account> accList){
        
        Set<Id> accIds = new Set<Id>();
        for (Account a : accList) {
            accIds.add(a.Id);
        }
        List<Opportunity> toBeUpdateOpportunities =new  List<Opportunity>();
        List<Opportunity> opps = [SELECT  Id, AccountId, StageName, CreatedDate, CloseDate FROM Opportunity WHERE AccountId IN : accIds];
        Datetime days30 = System.now()-30;
        if(opps.size()>0){
            for (Opportunity opp : opps) {
                if(opp.CreatedDate < days30 && opp.StageName != 'Closed Won' ){
                    opp.StageName = 'Closed Lost';
                    opp.CloseDate = System.today();
                }
                toBeUpdateOpportunities.add(opp);
            }
        }
        update toBeUpdateOpportunities;
    }
}


3. Once an Account is inserted an email should go to the System Admin user with specified text below.
An account has been created and the name is “Account Name”.
A.
we can clearly come to the conclusion that Email has to be sent after the Account is Inserted, so we use “after insert “.
When there is bulk insertion then we have to send a list of emails that is why we are using List<Messaging.SingleEmailMessage>
, we should first get the Email of the Admin using the query
Then we have to loop the Accounts which are getting inserted, then check whether the email id of the Admin is null or not before creating a mail to send

